#!/bin/bash
# Copyright (c) 2019 by Audere
#
# Use of this source code is governed by an MIT-style license that
# can be found in the LICENSE file distributed with this file.

set -euo pipefail
umask 077
SELF_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
. "$SELF_DIR/util.sh"

ACCOUNT="$(aws sts get-caller-identity --output text --query 'Account')"
REGISTRY="$ACCOUNT.dkr.ecr.us-west-2.amazonaws.com"

function fail() {
  echo2 "$*"
  exit 1
}

function ecr_login() {
  echo "=================================================="
  echo "Logging in to ECR"
  "$SELF_DIR/ecr-login"
}

function ecr_publish() {
  local repo="$1"
  local tag="$2"

  echo "=================================================="
  echo "Ensuring the destination repo for $repo exists"
  if [[ -z "$(aws ecr describe-repositories | jq '.repositories | .[] | select(.repositoryName == "'"${repo}"'")')" ]]; then
    echo "Creating new repo"
    aws ecr create-repository --repository-name "$repo"
  fi
  echo "Tagging '$repo' for upload to ECR"
  docker tag "$repo:$tag" "$REGISTRY/$repo:$tag"
  echo "Pushing '$repo' to ECR"
  docker push "$REGISTRY/$repo:$tag"
}

function ecs_deploy() {
  local service="$1"
  local current_tag="$3"
  local new_tag="$4"

  local repos=()
  while read -r line; do
    repos+=("$line")
  done <<< "$2"

  echo "=================================================="
  for repo in "${repos[@]}"
  do
    local current_digest="$(aws ecr batch-get-image --repository-name "$repo" --image-ids "imageTag=$current_tag" --query 'images[].imageId.imageDigest' --output text)"

    if [[ -z "$current_digest" ]]; then
        fail "$repo:$current_tag does not have a valid manifest - it may be an invalid repo or tag and cannot be deployed"
    fi

    local existing_digest="$(aws ecr batch-get-image --repository-name "$repo" --image-ids "imageTag=$new_tag" --query 'images[].imageId.imageDigest' --output text)"

    if [[ -z "$existing_digest" || "$existing_digest" != "$current_digest" ]]; then
      echo "Tagging '$repo:$current_tag' as '$repo:$new_tag'"
      local manifest="$(aws ecr batch-get-image --repository-name "$repo" --image-ids "imageTag=$current_tag" --query 'images[].imageManifest' --output text)"
      aws ecr put-image --repository-name "$repo" --image-tag "$new_tag" --image-manifest "$manifest"
    fi
  done

  echo "Updating ECS service - '$service'"
  local cluster="$(config_get "cluster.$new_tag")"
  aws ecs update-service --cluster "$cluster" --service "$service" --force-new-deployment
}

function check_service() {
  local service="$1"

  [[ -n "$(config_get "$service")" ]] \
    || fail "Expected a defined service, got '$service'."
}

function config_get() {
  jqraw ".$1 // empty" "$SELF_DIR/service-registry.json"
}

function config_get_list() {
  jqraw -c ".$1[]" "$SELF_DIR/service-registry.json"
}

function default_commit() {
  cd "$SELF_DIR"
  git rev-parse HEAD
}

subcommand="$1"
shift
case "$subcommand" in
  publish)
    repo="$1"
    tag="${2:-$(default_commit)}"

    ecr_login
    ecr_publish "$repo" "$tag"

    echo "=================================================="
    echo "Published '$repo:$tag' to ECR"
    echo "=================================================="
    ;;

  deploy)
    service="$1"
    check_service $service
    tag="${2:-$(default_commit)}"
    staging_service="$(config_get "$service.staging_service")"
    repos="$(config_get_list "$service.repo")"
    echo $repos

    ecr_login
    ecs_deploy "$staging_service" "$repos" "$tag" staging

    echo "=================================================="
    echo "Deployed '$staging_service' to '$tag'"
    echo "=================================================="
    ;;

  promote)
    service="$1"
    check_service $service
    prod_service="$(config_get "$service.prod_service")"
    repos="$(config_get_list "$service.repo")"

    ecr_login
    ecs_deploy "$prod_service" "$repos" staging prod

    echo "=================================================="
    echo "Promoted a new version of '$prod_service' from staging"
    echo "=================================================="
    ;;

  *)
    fail "Unrecognized sub-command '$subcommand'"
    ;;
esac
