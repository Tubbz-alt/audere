#!/bin/bash
# Copyright (c) 2019 by Audere
#
# Use of this source code is governed by an MIT-style license that
# can be found in the LICENSE file distributed with this file.

set -euo pipefail
umask 077
SELF_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
. "$SELF_DIR/util.sh"

ACCOUNT="$(aws sts get-caller-identity --output text --query 'Account')"
REGISTRY="$ACCOUNT.dkr.ecr.region.amazonaws.com"

function usage() {
  echo2 "$*"
  echo2 "Usage:"
  echo2 "  ${BASH_SOURCE[0]} <command> <service> [<git-revision>]"
  echo2 ""
  echo2 "where"
  echo2 "  <command> is one of 'publish' or 'deploy' or 'promote'"
  echo2 "  <service> is a valid service name"
  echo2 "  <git-revision> is a valid revision in the audere repo"
  exit 1
}

function ecr_login() {
  echo "=================================================="
  echo "Logging in to ECR"
  "$SELF_DIR/ecr-login"
}

function ecr_publish() {
  local repo="$1"
  local commit="$2"

  echo "=================================================="
  echo "Tagging '$repo' for upload to ECR"
  docker tag "$repo:$commit" "$REGISTRY/$repo:$commit"
  echo "Pushing '$repo' to ECR"
  docker push "$REGISTRY/$repo:$commit"
}

function ecs_deploy() {
  local service="$1"
  local current_tag="$2"
  local new_tag="$3"
  local repo="$(service_repo "$service")"

  echo "=================================================="
  echo "Re-tagging '$repo:$current_tag' as '$repo:$new_tag'"
  local manifest="$(aws ecr batch-get-image --repository-name "$repo" --image-ids "imageTag=$current_tag" --query 'images[].imageManifest' --output text)"
  aws ecr put-image --repository-name "$repo" --image-tag "$new_tag" --image-manifest "$manifest"

  echo "Updating ECS service - '$service'"
  aws ecs update-service --service "$service" --force-new-deployment
}

function ecs_promote() {
  ecs_deploy "$prod_service" staging prod
}

function service_repo() {
  local service="$1"

  [[ -n "$(config_get "$service")" ]] \
    || usage "Expected a defined service, got '$service'."

  config_get "$service.repo"
}

function config_get() {
  jqraw ".$1" "$SELF_DIR/service-registry.json"
}

function default_commit() {
  cd "$SELF_DIR"
  git rev-parse HEAD
}

subcommand="$1"
shift
case "$subcommand" in
  publish)
    service="$1"
    commit="${2:-$(default_commit)}"

    ecr_login
    ecr_publish "$(service_repo "$service")" "$commit"

    echo "=================================================="
    echo "Published '$repo:$commit' to ECR"
    echo "=================================================="
    ;;

  deploy)
    service="$1"
    commit="${2:-$(default_commit)}"
    staging_service="$(config_get "$service.staging_service")"

    ecr_login
    ecs_deploy "$staging_service" "$commit" staging

    echo "=================================================="
    echo "Deployed '$staging_service' to '$commit'"
    echo "=================================================="
    ;;

  promote)
    service="$1"
    commit="${2:-$(default_commit)}"
    prod_service="$(config_get "$service.prod_service")"

    ecr_login
    ecs_promote

    echo "=================================================="
    echo "Promoted a new version of '$prod_service' from staging"
    echo "=================================================="
    ;;

  *)
    usage "Unexpected sub-command '$subcommand'"
    ;;
esac
