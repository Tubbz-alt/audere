#!/bin/bash
# Copyright (c) 2019 by Audere
#
# Use of this source code is governed by an MIT-style license that
# can be found in the LICENSE file distributed with this file.

set -euo pipefail
umask 077
SELF_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
. "$SELF_DIR/util.sh"

ACCOUNT="$(aws sts get-caller-identity --output text --query 'Account')"
REGISTRY="$ACCOUNT.dkr.ecr.us-west-2.amazonaws.com"

function fail() {
  echo2 "$*"
  exit 1
}

function ecr_login() {
  echo "=================================================="
  echo "Logging in to ECR"
  "$SELF_DIR/ecr-login"
}

function ecr_publish() {
  local repo="$1"
  local tag="${2}"

  echo "=================================================="
  echo "Finding local image"
  docker image inspect "$repo:$tag" | jq --raw-output '.[].RepoTags | .[]'

  echo "=================================================="
  echo "Ensuring the destination repo for $repo exists"
  if [[ -z "$(aws ecr describe-repositories | jq '.repositories | .[] | select(.repositoryName == "'"${repo}"'")')" ]]; then
    echo "Creating new repo"
    aws ecr create-repository --repository-name "$repo"
  fi
  echo "Tagging '$repo' for upload to ECR"
  docker tag "$repo:$tag" "$REGISTRY/$repo:$tag"
  echo "Pushing '$repo' to ECR"
  docker push "$REGISTRY/$repo:$tag"
}

function ecs_deploy() {
  local service="$1"
  local repo_lines="$2"
  local current_tag="$3"
  local new_tag="$4"

  local repos=()
  while read -r line; do
    repos+=("$line")
  done <<< "$repo_lines"

  echo "=================================================="
  for repo in "${repos[@]}"; do
    local current_digest="$(ecr_image_digest "$repo" "$current_tag")"
    if [[ -z "$current_digest" ]]; then
      fail "$repo:$current_tag does not have a valid manifest - did you forget to publish?"
    fi

    local existing_digest="$(ecr_image_digest "$repo" "$new_tag")"
    if [[ -n "$existing_digest" && "$existing_digest" == "$current_digest" ]]; then
      echo "The image for '$repo:$new_tag' in ECR already matches '$repo:$current_tag', skipping update."
    else
      echo "Tagging '$repo:$current_tag' as '$repo:$new_tag'"
      local manifest="$(ecr_image_manifest "$repo" "$current_tag")"
      aws ecr put-image --repository-name "$repo" --image-tag "$new_tag" --image-manifest "$manifest"
    fi
  done

  echo "Updating ECS service - '$service'"
  local cluster="$(config_get "cluster.$new_tag")"
  aws ecs update-service --cluster "$cluster" --service "$service" --force-new-deployment
}

function ecr_query_image() {
  local subpath="$1"
  local repo="$2"
  local tag="$3"
  aws ecr batch-get-image --repository-name "$repo" --image-ids "imageTag=$tag" --query "images[].$subpath" --output text
}
function ecr_image_digest()   { ecr_query_image "imageId.imageDigest" "$@"; }
function ecr_image_manifest() { ecr_query_image "imageManifest" "$@"; }

function check_service() {
  local service="$1"

  [[ -n "$(config_get "\"$service\"")" ]] \
    || fail "Expected a defined service, got '$service'."
}

function config_get() {
  jqraw ".$1 // empty" "$SELF_DIR/service-registry.json"
}

function config_get_list() {
  jqraw -c ".$1[]" "$SELF_DIR/service-registry.json"
}

function default_commit() {
  cd "$SELF_DIR"
  git rev-parse HEAD
}

subcommand="$1"
shift
case "$subcommand" in
  publish)
    repo="$1"
    tag="${2:-latest}"

    ecr_login
    ecr_publish "$repo" "$tag"

    echo "=================================================="
    echo "Published '$repo:$tag' to ECR"
    echo "=================================================="
    ;;

  stage | prod)
    service="$1"
    check_service $service
    repos="$(config_get_list "\"$service\".repo")"
    echo "Repos: '$repos'"

    case "$subcommand" in
      stage) existing_tag="${2:-latest}";  new_tag="staging";;
      prod)  existing_tag="${2:-staging}"; new_tag="prod";;
      *) fail "internal error '$subcommand'";;
    esac

    service_id="$(config_get "\"$service\".\"${new_tag}_service\"")"
    echo "Service ID: '$service_id'"

    ecr_login
    ecs_deploy "$service_id" "$repos" "$existing_tag" "$new_tag"

    echo "=================================================="
    echo "Deployed '${service_id}'"
    echo "=================================================="
    ;;

  *)
    fail "Unrecognized sub-command '$subcommand'"
    ;;
esac
