#!/bin/bash
set -euo pipefail
set -x
umask 077
SELF_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

function echo2() { 1>&2 echo "$*"; }
function banner() { set +x; echo2 ""; echo2 "===================================="; echo2 "  $*"; echo2 ""; set -x; }
function die() { set +x; echo2 "$*"; exit 1; }

banner "Adding CouchDB repo"
echo "deb https://apache.bintray.com/couchdb-deb $(lsb_release -s -c) main" \
  | sudo tee "/etc/apt/sources.list.d/50-couchdb-sources.list"
banner "Adding CouchDB public key"
curl -L "https://couchdb.apache.org/repo/bintray-pubkey.asc" \
  | sudo apt-key add -

banner "Installing CouchDB"
sudo apt-get -y update
sudo apt-get -y install debconf
# Contents generated by:
#   sudo apt install debconf-utils && sudo debconf-get-selections | grep couchdb
sudo debconf-set-selections <<-EOF
	couchdb	couchdb/adminpass_again	password	
	couchdb	couchdb/adminpass	password	
	couchdb	couchdb/cookie	string	monster
	couchdb	couchdb/error_setting_password	error	
	couchdb	couchdb/adminpass_mismatch	error	
	couchdb	couchdb/nodename	string	couchdb@127.0.0.1
	couchdb	couchdb/bindaddress	string	127.0.0.1
	couchdb	couchdb/have_1x_databases	note	
	couchdb	couchdb/mode	select	standalone
EOF
sudo apt-get -y install couchdb

if ! curl --silent "http://localhost:5984"; then
  echo2 "Waiting for CouchDB to start.."
  until curl "http://localhost:5984"; do
    sleep 1
    echo2 -n "."
  done
  echo2 "Done"
fi

function ensuredb() {
  echo -n "Ensuring database '$1'.."
  curl -X PUT "http://localhost:5984/$1"
}
banner "Creating default databases"
ensuredb _users
ensuredb _replicator
ensuredb _global_changes

PASSWORD="$(</dev/urandom tr -dc A-Za-z0-9 | head -c 24; echo '')"
COUCH_URL="http://admin:$PASSWORD@localhost:5984"
CONFIG_URL="$COUCH_URL/_node/_local/_config"

banner "Creating admin user"
curl -X \
  PUT "http://localhost:5984/_node/_local/_config/admins/admin" \
  --data "\"$PASSWORD\""

banner "Adding admin to _users database"
curl -X \
  POST "$COUCH_URL/_users" \
  --header "Content-Type: application/json" \
  --data '{"_id": "org.couchdb.user:admin", "name": "admin", "password":"'"$PASSWORD"'", "type":"user", "roles":[]}'

banner "Setting chttpd/require_valid_user (lock cluster port 5984)"
curl -X \
  PUT "$CONFIG_URL/chttpd/require_valid_user" \
  --header "Content-Type: application/json" \
  --data '"true"'

banner "Setting couch_httpd_auth/require_valid_user (lock node-local port 5986)"
curl -X \
  PUT "$CONFIG_URL/couch_httpd_auth/require_valid_user" \
  --header "Content-Type: application/json" \
  --data '"true"'

banner "Increasing limits"
curl -X \
  PUT "$CONFIG_URL/httpd/max_http_request_size" \
  --header "Content-Type: application/json" \
  --data '"4294967296"'
curl -X \
  PUT "$CONFIG_URL/httpd/max_document_size" \
  --header "Content-Type: application/json" \
  --data '"4294967296"'

function validate_auth() {
  local port="$1"
  local auth="$2"
  local expect="$3"

  local url="http://${auth}localhost:$port"
  if ! curl --silent "$url" | grep "$expect"; then
    echo2 "Expected GET '$url' response to include '$expect'.  Rerunning:"
    curl "$url"
    exit 1
  fi
}
banner "Validating anonymous access fails"
validate_auth 5984 "" "unauthorized"
validate_auth 5986 "" "unauthorized"
banner "Validating authenticated access succeeds"
validate_auth 5984 "admin:${PASSWORD}@" "Welcome"
validate_auth 5986 "admin:${PASSWORD}@" "Welcome"

umask 077
echo "$PASSWORD" >"$HOME/.couchdb-pw"
