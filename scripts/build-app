#!/bin/bash
# Copyright (c) 2019 by Audere
#
# Use of this source code is governed by an MIT-style license that
# can be found in the LICENSE file distributed with this file.

# This increments build number for iOS and Android then triggers Circle build_deploy_fluathome job 
# Assumes we want to build head of current branch

set -euo pipefail

function usage_and_exit() {
  echo 1>&2 "Usage: build-app <type> \"description of build\" [--no-increment] [--skip-ios] [--skip-android]"
  echo 1>&2 ""
  echo 1>&2 "<type> = \"staging\"|\"prod\""
  echo 1>&2 "description of build = Brief description of what's new, used in Slack and git tag message" 
  echo 1>&2 "--no-increment = Skip incrementing build number"
  echo 1>&2 "--skip-ios     = Skip iOS build, only build Android"
  echo 1>&2 "--skip-android = Skip Android build, only build iOS"
  echo 1>&2 ""
  echo 1>&2 "Example:"
  echo 1>&2 "    build-app prod \"Latest strings from copywriter\""
  echo 1>&2 ""
  exit 1
}

if [[ "${APP_ROOT_DIR:-}" == "" || "${PRODUCT:-}" == "" ]]; then
  echo 1>&2 "Error: APP_ROOT_DIR and/or PRODUCT is not set."
  echo 1>&2 "       Looks like you are calling [repo root]/scripts/build-app directly."
  echo 1>&2 "       Call [app dir]/scripts/build-app instead which will set the variables correctly."
  exit 1 
fi

INCREMENT=true
BUILD_IOS=true
BUILD_ANDROID=true
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
# To build a specific commit 1234567 instead of head, use --no-increment and uncomment following line
#REVISION="\"revision\":\"1234567\","
REVISION=""

if [[ "$#" -lt 2 ]]; then 
  usage_and_exit
fi

POSITIONAL=()
while [[ "$#" -gt 0 ]]; do
  key="$1"
  case "$key" in
    --no-increment) 
      INCREMENT=false
      shift
      ;;
    --skip-ios) 
      BUILD_IOS=false
      shift
      ;;
    --skip-android)
      BUILD_ANDROID=false
      shift
      ;;
    *)
      POSITIONAL+=("$1") # save in array for later 
      shift
      ;; 
  esac
done
set -- "${POSITIONAL[@]}" # restore positional params 
 
if [[ "$#" -ne 2 || ! "$1" =~ ^(staging|prod)$ ]]; then
  echo "Error: First argument must be \"staging\" or \"prod\""
  echo "       Second argument must be description of build"
  usage_and_exit
fi 
CHANNEL="$1"
DESCRIPTION="$2"

if [[ "$BUILD_IOS" = false && "$BUILD_ANDROID" = false ]]; then 
  echo 1>&2 "Error: Cannot skip both iOS and Android"
  exit 1
fi

if [[ "${CIRCLE_TOKEN:-}" == "" ]]; then
  echo 1>&2 "Error: CIRCLE_TOKEN env variable is not set. Set this before running this script."
  echo 1>&2 "       If you have no API token, get one here: https://circleci.com/account/api"
  exit 1 
fi

if [[ "$INCREMENT" = true ]]; then 
  PLIST_FILE="$APP_ROOT_DIR/ios/fluathome/Supporting/Info.plist"
  BUILD_NUM="$(/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "$PLIST_FILE")"
  VERSION_NUM="$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "$PLIST_FILE")"
  while true; do 
    read -p "Keep version $VERSION_NUM? (Choose n if $VERSION_NUM has been approved on App Store.) [Y/n] " input
    case "$input" in 
      Y) 
        read -p "Will increment build number to $((BUILD_NUM+1)) and commit to $BRANCH. Press Enter to continue or Ctrl-C to abort."
        cd "$APP_ROOT_DIR/ios"
        fastlane increment_build_number_and_commit versionBump:false
        break;;
      n) 
        SEMVER=( ${VERSION_NUM//./ } )
        MAJOR="${SEMVER[0]}"
        MINOR="${SEMVER[1]}"
        PATCH="${SEMVER[2]}"
        read -p "Will increment version to $MAJOR.$MINOR.$((PATCH+1)), build number to $((BUILD_NUM+1)) and commit \
to $BRANCH. Press Enter to continue or Ctrl-C to abort."
        cd "$APP_ROOT_DIR/ios"
        fastlane increment_build_number_and_commit versionBump:true
        break;;
      *) 
        echo "Please answer Y or n." ;; 
    esac
  done
fi 

if [[ "$BUILD_IOS" = true ]]; then
  echo "Asking CircleCI to build flu@home iOS"
  curl --user "${CIRCLE_TOKEN}":\
     -X POST\
     --header "Content-Type: application/json"\
     -d '{'$REVISION' "build_parameters": {"CIRCLE_JOB": "build_deploy_'$PRODUCT'", "PRODUCT": "'$PRODUCT'", "EXPO_RELEASE_CHANNEL": "'$CHANNEL'", "BUILD_DESCRIPTION": "'"$DESCRIPTION"'"}}' \
https://circleci.com/api/v1.1/project/github/AudereNow/learn/tree/"$BRANCH"
fi 

if [[ "$BUILD_ANDROID" = true ]]; then
  echo "Asking CircleCI to build flu@home Android"
  curl --user "${CIRCLE_TOKEN}":\
     -X POST\
     --header "Content-Type: application/json"\
     -d '{'$REVISION' "build_parameters": {"CIRCLE_JOB": "build_deploy_'$PRODUCT'_android", "PRODUCT": "'$PRODUCT'", "EXPO_RELEASE_CHANNEL": "'$CHANNEL'", "BUILD_DESCRIPTION": "'"$DESCRIPTION"'"}}' \
https://circleci.com/api/v1.1/project/github/AudereNow/learn/tree/"$BRANCH"
fi

