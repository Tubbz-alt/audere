#!/bin/bash
# Copyright (c) 2019 by Audere
#
# Use of this source code is governed by an MIT-style license that
# can be found in the LICENSE file distributed with this file.

set -euo pipefail
umask 077
SELF_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
staging_BASEURL="https://api.staging.auderenow.io"
prod_BASEURL="https://api.auderenow.io"

function fail() {
  echo -e "$*"
  exit 1
}

function print_test_outcome() {
  local actual="$1"
  local expected="$2"
  if [[ "$actual" == $expected ]]; then
    echo -e "${GREEN}passed${NC}\n"
  else 
    fail "${RED}FAILED${NC}\n${YELLOW}Expected:${NC}\n$expected\n${YELLOW}Got:${NC}\n$actual\n"
  fi
}

function do_api_test() {
  local base_url="$1"
  echo -e "${YELLOW}[$(date -Iseconds)] Testing /api${NC}"
  actual_result="$(curl -sS "${base_url}/api")"
  expected_result="{\"Status\":\"OK\"}"
  print_test_outcome "${actual_result}" "${expected_result}"
  return 0
}

function do_version_test() {
  local base_url="$1"
  local version="$2"
  echo -e "${YELLOW}[$(date -Iseconds)] Testing /about${NC}"
  if [[ $version == "n/a" ]]; then
    fail "Could not find commit in ECR image details"
  fi
  actual_result="$(curl -sS "${base_url}/about")"
  expected_result="*\"hash\":\"$version\"}"
  print_test_outcome "${actual_result}" "${expected_result}"
  return 0
}

function do_bad_url_test() {
  local base_url="$1"
  echo -e "${YELLOW}[$(date -Iseconds)] Testing /foobarfakeurl${NC}"
  actual_result="$(curl -sS "${base_url}/foobarfakeurl")"
  expected_result="*Cannot GET /foobarfakeurl</pre>*"
  print_test_outcome "${actual_result}" "${expected_result}"
  return 0
}

function do_chills_barcode_test() {
  local base_url="$1"
  echo -e "${YELLOW}[$(date -Iseconds)] Testing /api/chills/matchBarcode${NC}"
  data="{\"barcode\":\"$CHILLS_TEST_BARCODE\",\"id\":\"$CHILLS_TEST_DOCID\",\"secret\":\"SECRET_KEY\",\"demo\":\"true\"}"
  if [[ $base_url == $staging_BASEURL ]]; then
    data=${data//"SECRET_KEY"/$STAGING_SECRET_KEY}
  else
    data=${data//"SECRET_KEY"/$PROD_SECRET_KEY}
  fi
  actual_result="$(curl -X POST -H "Content-Type: application/json" -d "${data}" -sS "$base_url"/api/chills/matchBarcode)"
  expected_result="{\"email\":\"t**t@auderenow.org\",\"emailHash\":*"
  print_test_outcome "${actual_result}" "${expected_result}"
  return 0
}

function do_cough_giftcard_test() {
  local base_url="$1"
  echo -e "${YELLOW}[$(date -Iseconds)] Testing /api/cough/giftcardAvailable${NC}"
  if [[ $base_url == $staging_BASEURL ]]; then
    data="giftcardRequest=\\{\"secret\":\"SECRET_KEY\",\"denomination\":25,\"isDemo\":false,\"docId\":\"$COUGH_TEST_STAGING_DOCID\",\"barcode\":\"$COUGH_TEST_BARCODE\"\\}"
    data=${data//"SECRET_KEY"/$STAGING_SECRET_KEY}
  else
    data="giftcardRequest=\\{\"secret\":\"SECRET_KEY\",\"denomination\":20,\"isDemo\":false,\"docId\":\"$COUGH_TEST_PROD_DOCID\",\"barcode\":\"$COUGH_TEST_BARCODE\"\\}"
    data=${data//"SECRET_KEY"/$PROD_SECRET_KEY}
  fi
  actual_result="$(curl -sS "$base_url"/api/cough/giftcardAvailable?"$data")"
  expected_result="{\"giftcardAvailable\":true}"
  print_test_outcome "${actual_result}" "${expected_result}"
  return 0
}

target_type="$1"
commit="$2"
case "$target_type" in 
  staging|prod) 
    URL_VAR=${target_type}_BASEURL  
    echo -e "Starting post-deploy tests against ${!URL_VAR}\n"
    do_api_test "${!URL_VAR}"
    do_version_test "${!URL_VAR}" "$commit"
    do_bad_url_test "${!URL_VAR}"
    do_chills_barcode_test "${!URL_VAR}"
    do_cough_giftcard_test "${!URL_VAR}"
    echo -e "All tests passed"
    ;;
  *) 
    fail "First argument should be 'staging' or 'prod'"    
    ;;
esac 

