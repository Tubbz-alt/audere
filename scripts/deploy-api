#!/bin/bash
# Copyright (c) 2018 by Audere
#
# Use of this source code is governed by an MIT-style license that
# can be found in the LICENSE file distributed with this file.

set -euo pipefail
umask 077
SELF_DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
. "$SELF_DIR/util.sh"

function usage() {
  echo2 "$*"
  echo2 "Usage:"
  echo2 "  ${BASH_SOURCE[0]} <environment> [<git-revision>]"
  echo2 ""
  echo2 "where"
  echo2 "  <environment> is one of 'staging' or 'prod'"
  echo2 "  <git-revision> is a valid revision in the audere repo"
  exit 1
}

case "$#" in
  1)
    readonly environment="$1"
    readonly commit="$(cd "$SELF_DIR/.." && git rev-parse HEAD)"
    ;;
  2)
    readonly environment="$1"
    readonly commit="$2"
    ;;
  *) usage "Expected 1 or 2 arguments, got $#.";;
esac

case "$environment" in
  "staging" | "prod") ;;
  *) usage "Unexpected environment '$environment'";;
esac

if [[ "$(git cat-file -t "$commit")" != "commit" ]]; then
  usage "Unrecognized commit '$commit'"
fi

API_DIR="$(cd "$SELF_DIR/../terraform/flu/api-$environment" && pwd)"
API_MODULE_DIR="$(cd "$SELF_DIR/../terraform/modules/flu-api" && pwd)"
LOCAL_DIR="$(cd "$SELF_DIR/../local" && pwd)"
API_INIT_TAR="$LOCAL_DIR/flu-api-staging-init.tar.bz2.base64"

# TODO: move to assets
if [[ \
  "$API_MODULE_DIR/init/api-init" -nt "$API_INIT_TAR" || \
  "$API_MODULE_DIR/init/bash_profile" -nt "$API_INIT_TAR"
]]; then
  cd "$API_MODULE_DIR"
  ./init-local
  echo "=================================================="
  echo "Updated $API_INIT_TAR"
  echo "=================================================="
fi

"$SELF_DIR/../terraform/modules/assets/push.sh"

set -x

cd "$API_DIR"
terraform init
terraform taint -module=flu_api aws_launch_configuration.flu_api_instance
terraform apply -var "commit=$commit" -var "migrate=true"
set +x

MIGRATE_NAME="flu-${environment}-api-migrate"
echo "Looking up 'vmid $MIGRATE_NAME'.."
MIGRATE_ID="$(aws-instance-id $MIGRATE_NAME)"
echo "  ..got '$MIGRATE_ID'"
aws-wait-for-instance-state "$MIGRATE_ID" stopped

set -x
terraform apply -var "commit=$commit"
