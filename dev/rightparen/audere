#!/bin/bash
set -o pipefail

function audere-init() {
  _au_self="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"/audere
  _au_github="$HOME/github"
  AUDERE="$HOME/audere"
  FLU_TS="$AUDERE/FluTrack"
  GITHUB_MEDIC="$_au_github/medic"
  GITHUB_MEDIC_WEBAPP="$GITHUB_MEDIC/medic-webapp"
  GITHUB_DIMAGI="$_au_github/dimagi"
  GITHUB_COMMCARE_HQ="$GITHUB_DIMAGI/commcare-hq"
  export AWS_PROFILE="audere"

  [[ -f "$HOME/.couch-env" ]] && \
      . "$HOME/.couch-env"

  function echo2() { echo 1>&2 "$@"; }
  function audere() { source "$_au_self" "$@"; }
  function jqraw() { jq --raw-output "$@"; }
  function die() { echo2 "$@"; exit 1; }

  AUDERE_AWS_USER="ubuntu"
  AUDERE_AWS_INSTANCE_TYPE="t3.small"

  # Partial list in https://github.com/dimagi/commcare-hq/blob/master/docker/README.md
  INTERESTING_PORTS=(
    2181 # ZooKeeper
    5432 # PostgreSQL
    5984 # CouchDB
    5986 # CouchDB
    5988 # MedicMobile
    6397 # Redis
    8000 # Commcare HQ
    8010 # Formplayer
    9092 # Kafka
    9200 # Elastic Search
    9300 # Elastic Search
    9980 # Riak CS
  )
}

_au_subcommand="$1" && shift
case "$_au_subcommand" in
  "" | init)
    audere-init
    ;;
  *)
    [[ -z "$_au_self" ]] && audere-init
    ;;
esac

case "$_au_subcommand" in
  init) true;;

  cd)      cd "$AUDERE${1:+/}$1";;
  cdm)     cd "$GITHUB_MEDIC${1:+/}$1";;
  cdmw)    cd "$GITHUB_MEDIC_WEBAPP${1:+/}$1";;
  cdmwa)   cd "$GITHUB_MEDIC_WEBAPP${1:+/}$1";;
  cdcc)    cd "$GITHUB_COMMCARE_HQ${1:+/}$1";;
  cdrn)    cd "$FLU_TS${1:+/}$1";;
  cdfluts) cd "$FLU_TS${1:+/}$1";;
  cdweb)   cd "$AUDERE/FluApi${1:+/}$1";;

  # --------------------------------------------------------------------------------
  # learn

  webenv)
    audere cdweb
    (
      export PS1_EXTRA="audere"
      pipenv shell
    ) && exit
    ;;

  rs | rws | run-web-service)
    (set -euo pipefail
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      export DEBUG="express:*"
      cd "$AUDERE/FluApi"
      nvm use v10
      yarn install
      yarn start
    )
    ;;

  rc | rnr | tsrun | rnrun | react-native-run)
    (set -euo pipefail
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      export NODE_ENV="development"
      export REACT_NATIVE_API_SERVER="http://$(lanip):3000/api"
      cd "$FLU_TS"
      sudo sysctl -w kern.maxfiles=5242880
      sudo sysctl -w kern.maxfilesperproc=524288
      nvm use v10
      yarn install
      yarn start
    )
    ;;

  nmb)          ./node_modules/.bin/"$@";;
  sqlize)       ./node_modules/.bin/sequelize "$@";;
  tsr | tsrepl) ./node_modules/.bin/ts-node "$@";;
  tsc)          ./node_modules/.bin/tsc "$@";;

  # --------------------------------------------------------------------------------
  # Commcare HQ

  ccinit)
    audere cdcc
    workon commcare-hq
    ;;

  ccrun)
    audere ccstart
    audere ccmanage runserver 0.0.0.0:8000
    ;;

  ccstart)
    audere ccinit
    audere ccdocker up -d
    ;;

  ccstop)
    audere ccdocker stop
    ;;

  ccpatch)
    (
      cd "$GITHUB_COMMCARE_HQ" || die "Could not cd to '$GITHUB_COMMCARE_HQ'"

      diff --unified localsettings{.example,}.py >~/audere/scripts/onenode-localsettings.py.patch
      _au_status="$?"
      [[ "$_au_status" == 1 ]] || die "Expected diff would return 1 but got '$_au_status'"
    )
    ;;

  ccd | ccdocker) echorun "$GITHUB_COMMCARE_HQ/scripts/docker" "$@";;
  ccm | ccmanage) echorun "$GITHUB_COMMCARE_HQ/manage.py" "$@";;

  # --------------------------------------------------------------------------------
  # Medic Mobile

  halt0) ssh -t audere0 sudo halt;;

  minit)
    if [[ -z "$COUCH_USER" || -z "$COUCH_PWD" ]]; then
      echo2 "COUCH_USER and COUCH_PWD are not set."
      echo2 "Nothing changed."
    else
      export COUCH_URL=http://$COUCH_USER:$COUCH_PWD@localhost:5984/medic
      export API_URL=http://$COUCH_USER:$COUCH_PWD@localhost:5988
      export COUCH_NODE_NAME=couchdb@localhost
    fi
    ;;

  mclean)
    cd "$GITHUB_MEDIC_WEBAPP"
    git clean -xdf
    cat >"$GITHUB_MEDIC_WEBAPP/.env" <<-EOF
			COUCH_URL=http://admin:pass@localhost:5984/medic
			COUCH_NODE_NAME=couchdb@localhost
		EOF
    audere minit &&
    npm update -g npm &&
    npm install -g grunt-cli &&
    cd "$GITHUB_MEDIC_WEBAPP" && yarn install &&
    cd "$GITHUB_MEDIC_WEBAPP/webapp" && yarn install &&
    cd "$GITHUB_MEDIC_WEBAPP/admin" && yarn install &&
    cd "$GITHUB_MEDIC_WEBAPP/api" && yarn install &&
    cd "$GITHUB_MEDIC_WEBAPP/sentinel" && yarn install &&
    cd "$GITHUB_MEDIC_WEBAPP"
    ;;

  medic-test-init)
    cd "$GITHUB_MEDIC_WEBAPP"
    export COUCH_URL=http://admin:pass@localhost:5984/medic
    export API_URL=http://admin:pass@localhost:5988
    export COUCH_NODE_NAME=nonode@nohost
    export CHROME_BIN="$(type -P chromium-browser || type -P chromium)"
    ;;

  mgrunt | medic-test) ( audere medic-test-init && grunt "$@" );;
  mtest) audere medic-test test;;
  munit) audere medic-test unit;;
  me2e)  audere medic-test ci-integration-e2e;;
  mci)   audere medic-test ci;;

  # --------------------------------------------------------------------------------
  # AWS

  ssh-retry-true)
    (set -euo pipefail
      _au_addr="${1:-$_au_user@$_au_ip}"
      echo "Waiting for (accept-new) ssh to '$_au_addr'.."
      until ssh "-oStrictHostKeyChecking=accept-new" "$_au_addr" true; do
        sleep 1
        echo "  retrying.."
      done
    )
    ;;

  env | aenv | aws-env)
    (set -euo pipefail
      _au_user="$(audere get-ssh-user "$1")"
      _au_itag="$(audere get-ssh-itag "$1")"
      shift
      _au_ip="$(audere aws-dns "$_au_itag")"
      echo "Syncing audere to '$_au_user@$_au_ip' ('$_au_itag')"
      audere ssh-retry-true "$_au_user@${_au_ip}"
      rsync -a "$@" "$HOME/audere" "$_au_user@${_au_ip}:"
    )
    ;;

  mjm-env)
    (set -euo pipefail
      _au_user="$(audere get-ssh-user "$1")"
      _au_itag="$(audere get-ssh-itag "$1")"
      shift
      _au_ip="$(audere aws-dns "$_au_itag")"
      echo "Syncing env to '$_au_user@$_au_ip' ('$_au_itag')"
      rsync --delete -a "$HOME/env" "$_au_user@${_au_ip}:"
    )
    ;;

  api-setup)
    (set -euo pipefail
      audere env api
      audere rsync-web api
      audere ssh api ./audere/scripts/aws-api-setup
    )
    ;;

  api-teardown)
    (set -euo pipefail
      audere env api
      audere ssh api ./audere/scripts/aws-api-teardown
    )
    ;;

  rsync-web)
    (set -euo pipefail
      _au_user="$(audere get-ssh-user "$1")"
      _au_itag="$(audere get-ssh-itag "$1")"
      shift
      _au_ip="$(audere aws-dns "$_au_itag")"
      echo "Syncing DjangoWebService to api"
      rsync -a "$HOME/audere/learn/DjangoWebService" "$_au_user@${_au_ip}:"
    )
    ;;

  monwatch)
    (set -euo pipefail
      _au_itag="$1" && shift
      while true; do
        _au_ip="$(audere aws-dns "$_au_itag")"
          ssh "-oStrictHostKeyChecking=accept-new" "ubuntu@$_au_ip" watch '"uptime;free;df -h"'
        echo -n Sleeping...
        sleep 10
        echo done
      done
    )
    ;;

  asshL | aws-sshL)
    (set -euo pipefail
      _au_user="$(audere get-ssh-user "$1")"
      _au_itag="$(audere get-ssh-itag "$1")"
      shift
      _au_ip="$(audere aws-dns "$_au_itag")"
      echo "Connecting to '$_au_user@$_au_ip' ('$_au_itag')"
      audere sshL "$_au_user@$_au_ip" "$@"
    )
    ;;

  sshL)
    echo "Forwarding ports to '$*'"
    echo "  Ports: ${INTERESTING_PORTS[@]}"
    ssh -t $(for i in ${INTERESTING_PORTS[@]}; do printf " -L %d:localhost:%d" $i $i; done) "$@"
    ;;

  ssh | assh | aws-ssh)
    (set -euo pipefail
      _au_user="$(audere get-ssh-user "$1")"
      _au_itag="$(audere get-ssh-itag "$1")"
      shift
      _au_ip="$(audere aws-dns "$_au_itag")"
      echo "Connecting to '$_au_user@$_au_ip' ('$_au_itag')"
      ssh -t "$_au_user@$_au_ip" "$@"
    )
    ;;

  user)
    if [[ "$#" == 0 ]]; then
      echo "AUDERE_AWS_USER=$AUDERE_AWS_USER"
    else
      _au_prev_user="$AUDERE_AWS_USER"
      AUDERE_AWS_USER="$1"
      echo "Setting AUDERE_AWS_USER to '$AUDERE_AWS_USER' (was '$_au_prev_user')"
    fi
    ;;

  get-ssh-user) if [[ "$1" == *@* ]]; then echo "${1%@*}";  else echo "$AUDERE_AWS_USER"; fi;;
  get-ssh-itag) if [[ "$1" == *@* ]]; then echo "${1##*@}"; else echo "$1";               fi;;

  itype | set-instance-type)
    if [[ "$#" == 0 ]]; then
      echo "AUDERE_AWS_INSTANCE_TYPE=$AUDERE_AWS_INSTANCE_TYPE"
    else
      _au_prev_type="$AUDERE_AWS_INSTANCE_TYPE"
      AUDERE_AWS_INSTANCE_TYPE="$1"
      echo "Setting AUDERE_AWS_INSTANCE_TYPE to '$AUDERE_AWS_INSTANCE_TYPE' (was '$_au_prev_type')"
    fi
    ;;

  # To update, see
  #   aws ec2 describe-key-pairs
  #   aws ec2 describe-security-groups
  #   aws ec2 describe-subnets
  launch | aws-launch)
    (set -euo pipefail

      if [[ "$(audere aws-running-list "$1" | jq length)" != 0 ]]; then
        echo2 "Error: there is already a '$1' instance running"
        exit 1
      fi

      echo "Creating new '$AUDERE_AWS_INSTANCE_TYPE' instance for Name='$1'"
      _au_key_pair="$(audere aws-key-pair "*$USER*" | jqraw '.KeyName')"

      _au_ssh_group="$(audere aws-security-group "ssh" | jqraw '.GroupId')"
      _au_http_group="$(audere aws-security-group "http" | jqraw '.GroupId')"
      _au_dflt_group="$(audere aws-security-group "default" | jqraw '.GroupId')"

      _au_instances="$( \
        aws ec2 run-instances \
          --image-id ami-0bbe6b35405ecebdb \
          --count 1 \
          --instance-type "$AUDERE_AWS_INSTANCE_TYPE" \
          --key-name "$_au_key_pair" \
          --security-group-ids "$_au_ssh_group" "$_au_http_group" "$_au_dflt_group" \
          --subnet-id subnet-9de0b1e4 \
          --tag-specifications \
            'ResourceType=instance,Tags=[{Key=Name,Value='"$1"'}]' \
            'ResourceType=volume,Tags=[{Key=Name,Value='"$1"'}]' \
          | tee ~/.aws-last-run-instances | jq '.Instances' \
        )"
      _au_instance="$(audere jq-unique "instances created" "$_au_instances")"
      _au_instance_id="$(echo "$_au_instance" | jqraw '.InstanceId')"
      _au_instance_private_ip="$(echo "$_au_instance" | jqraw '.PrivateIpAddress')"
      echo "Instance ID: '$_au_instance_id', private ip='$_au_instance_private_ip'"

      audere aws-wait-for-instance-state running "$_au_instance_id"

      if _au_elastic_ip="$(audere aws-elastic-address "$1" 2>/dev/null)"; then
        _au_allocation_id="$(echo "$_au_elastic_ip" | jqraw ".AllocationId")"
        _au_public_ip="$(echo "$_au_elastic_ip" | jqraw ".PublicIp")"
        echo "Binding to elastic ip '$_au_public_ip', id='$_au_allocation_id'"
        aws ec2 associate-address \
          --allocation-id "$_au_allocation_id" \
          --instance-id "$_au_instance_id" \
          --private-ip-address "$_au_instance_private_ip" \
          --allow-reassociation \
          --region us-west-2
      fi

      echo "Resizing root volume"
      _au_instance="$(audere aws-instance-by-id "$_au_instance_id")"
      _au_volume="$(echo "$_au_instance" | jqraw '.BlockDeviceMappings[].Ebs.VolumeId')"
      echo "  Volume ID: '$_au_volume'"
      aws ec2 modify-volume --volume-id "$_au_volume" --size 15
    )
    ;;

  dev | modev | moshdev | devL)
    (set -euo pipefail
      _au_user="$(audere get-ssh-user "${1:-$USER@rightparen}")"
      _au_itag="$(audere get-ssh-itag "${1:-$USER@rightparen}")"
      _au_id="$(audere vmid "$_au_itag")"
      _au_status="$(audere aws-instance-state "$_au_id")"

      if [[ "$_au_status" =~ (stopping|pending) ]]; then
        echo "Waiting for instance to stabilize (currently '$_au_status')"
        while [[ "$_au_status" =~ (stopping|pending) ]]; do
          sleep 1
          _au_status="$(audere aws-instance-state "$_au_id")"
          echo "  instance is '$_au_status'"
        done
      fi

      [[ "$_au_status" == stopped ]] && audere start "$_au_itag"

      if [[ "$_au_status" =~ (stopped|stopping|pending|running) ]]; then
        _au_addr="$_au_user@$(audere dns "$_au_itag")"
        if [[ "$_au_subcommand" == devL ]]; then
          audere sshL "$_au_addr"
        elif [[ "$_au_subcommand" =~ (dev|modev|moshdev) ]]; then
          echo "Moshing to '$_au_addr'.."
          mosh "$_au_addr"
        else
          echo 1>&2 "Sub-command processing for '$_au_subcommand' is out of sync"
          false
        fi
      else
        echo 1>&2 "Invalid status ('$_au_status') for instance (tag='$_au_itag' id='$_au_id')"
        false
      fi
    )
    ;;

  stopdev | undev)
    (set -euo pipefail
      _au_itag="$(audere get-ssh-itag "${1:-$USER@rightparen}")"
      audere stop "$_au_itag"
    )
    ;;

  start)
    (set -euo pipefail
      _au_id="$(audere vmid "$1")"
      echo "Starting tag '$1' (vmid='$_au_id').."
      aws ec2 start-instances --instance-ids "$_au_id"
      audere aws-wait-for-instance-state running "$_au_id"
      echo "Waiting for IP assignment.."
      until _au_ip="$(audere dns "$1" 2>/dev/null)"; do
        sleep 1
      done
      audere ssh-retry-true "$USER@$_au_ip"
    )
    ;;

  stop)
    (set -euo pipefail
      _au_id="$(audere vmid "$1")"
      _au_ip="$(audere dns "$1")"
      aws ec2 stop-instances --instance-ids "$_au_id"
      ssh-keygen -R "$_au_ip"
    )
    ;;

  terminate | aws-terminate)
    (set -euo pipefail
      _au_id="$(audere vmid "$1")"
      _au_ip="$(audere dns "$1")"
      aws ec2 terminate-instances --instance-ids "$_au_id"
      ssh-keygen -R "$_au_ip"
    )
    ;;

  bind-dns)
    (set -euo pipefail
      _au_tag="$1"
      _au_ip="$(audere aws-dns "$_au_tag")"
      aws route53 change-resource-record-sets --hosted-zone-id Z2JVHTT9LKA76J --change-batch file://<(
        cat <<-EOF
				{
				  "Changes": [{
				    "Action": "UPSERT",
				    "ResourceRecordSet": {
				      "Name": "$_au_tag.auderenow.io",
				      "Type": "A",
				      "TTL": 300,
				      "ResourceRecords": [{
				        "Value": "$_au_ip"
				      }]
				    }
				  }]
				}
				EOF
      )
    )
    ;;

  open-http | aws-open-http)
    (set -euo pipefail
      audere set-security-groups "$1" \
        "$(audere aws-security-group "http" | jqraw '.GroupId')"
    )
    ;;

  aws-volumes)
    aws ec2 describe-volumes --filters "Name=tag:Name,Values=$1" | jq '.Volumes'
    ;;

  aws-security-group)
    audere jq-unique "security groups match '$1'" "$(audere aws-security-groups "$1")"
    ;;

  aws-security-groups)
    aws ec2 describe-security-groups --filters "Name=group-name,Values=$1" | jq '.SecurityGroups'
    ;;

  aws-set-security-groups)
    _au_tag="$1"
    (( $# > 0 )) && shift
    _au_instance_id="$(audere aws-vmid "$_au_tag")" \
      && aws ec2 modify-instance-attribute \
             --instance-id "$_au_instance_id" \
             --groups "$@"
    ;;

  aws-dns-table)
    (set -euo pipefail
      _au_running="$(aws ec2 describe-instances --filters 'Name=instance-state-name,Values=running' | jq '[.Reservations[].Instances[]]')"
      _au_running_count="$(echo "$_au_running" | jq length)"
      for i in $(seq 0 $((_au_running_count - 1))); do
        _au_itag="$(echo "$_au_running" | jqraw ".[$i] | .Tags[] | [{key:.Key,value:.Value}] | from_entries | select(.Name != null) | .Name")"
        _au_private_ip="$(echo "$_au_running" | jqraw ".[$i].PrivateIpAddress")"
        echo "$_au_itag=\"$_au_private_ip\""
      done
    )
    ;;

  ils | ilist | aws-running-instance-list)
    audere aws-running-list | \
      jq '[.[].Tags[] | [{key:.Key,value:.Value}] | from_entries | select(.Name != null) | .Name]'
    ;;

  ip   | aws-ip)         audere aws-running "$@" | jqraw ".PublicIpAddress";;
  iip  | aws-private-ip) audere aws-running "$@" | jqraw ".PrivateIpAddress";;
  dns  | aws-dns)        audere aws-running "$@" | jqraw ".PublicIpAddress";;
  vmid | aws-vmid)       audere aws-iknown "$@" | jqraw ".InstanceId";;

  eip  | aws-elastic-ip)            audere aws-elastic-address "$@" | jqraw ".PublicIp";;
  eaid | aws-elastic-allocation-id) audere aws-elastic-address "$@" | jqraw ".AllocationId";;
  eiid | aws-elastic-instance-id)   audere aws-elastic-address "$@" | jqraw ".InstanceId";;

  aws-key-pair)
    audere jq-unique "key-pairs found that match '$1'" "$(audere aws-key-pairs "$1")"
    ;;

  aws-key-pairs)
    case "$#" in
      0) aws ec2 describe-key-pairs;;
      1) aws ec2 describe-key-pairs --filters "Name=key-name,Values=$1";;
      *) echo2 "Expected 0 or 1 argument, got '$#'" && false;;
    esac \
      | jq '[.KeyPairs[]]'
    ;;

  aws-running)
    audere jq-unique "instances found" \
      "$(audere aws-running-list "$@")"
    ;;

  aws-iknown)
    audere jq-unique "instances found" \
      "$(audere aws-instance-list "running,stopped,stopping,pending" "$@")"
    ;;

  aws-wait-for-instance-state)
    _au_instance_state="$(audere aws-instance-state "$2")"
    if [[ "$_au_instance_state" != "$1" ]]; then
      echo "Waiting for instance to be '$1' (currently '$_au_instance_state')"
      while [[ "$_au_instance_state" != "$1" ]]; do
        sleep 1
        _au_instance_state="$(audere aws-instance-state "$2")"
        echo " instance is '$_au_instance_state'"
      done
    fi
    ;;

  istate | aws-instance-state)
    audere aws-instance-by-id "$1" | jqraw '.State.Name'
    ;;

  aws-instance-by-id)
    audere jq-unique "instances by id '$1'" "$(aws ec2 describe-instances --instance-ids "$@" | jq '[.Reservations[].Instances[]]')"
    ;;

  aws-running-list) audere aws-instance-list running "$@";;
  aws-instance-list)
    case "$#" in
      0|1)
        aws ec2 describe-instances \
            --filters "Name=instance-state-name,Values=${1:-running}"
        ;;
      2)
        aws ec2 describe-instances \
            --filters \
            "Name=instance-state-name,Values=$1" \
            "Name=tag:Name,Values=$2"
        ;;
      *)
        echo2 "Error, expected 2 or fewer arguments, got $#."
        false
        ;;
    esac \
      | jq '[.Reservations[].Instances[]]'
    ;;

  ela | aws-elastic-address)
    audere jq-unique "elastic ips found" \
      "$(audere aws-elastic-addresses "$1")"
    ;;

  aws-elastic-addresses)
    {
      if [[ "$#" == 0 || "$1" == "" ]]; then
        aws ec2 describe-addresses
      elif [[ "$#" == 1 ]]; then
        aws ec2 describe-addresses \
            --filters \
            "Name=tag:Name,Values=$1"
      else
        echo2 "Error, expected 0 or 1 argument, got $#."
        false
      fi
    } | jq '[.Addresses[]]'
    ;;

  jq-unique)
    _au_desc="$1"
    _au_json="${2:-}"
    case "$(echo "$_au_json" | jq length)" in
      0) echo2 "Error: no $_au_desc" && false;;
      1) echo "$_au_json" | jq '.[0]';;
      *) echo2 "Error: multiple $_au_desc" && echo "$_au_json" | jq 1>&2 && false;;
    esac
    ;;

  type)
    if [[ -z "$1" ]]; then
      echo "Expected sub-command to show."
    else
      awk -- 'BEGIN { printing=0; depth=0 }
              /^ *case .* in *$/ { depth++ }
              /^ *esac *$/ && depth { depth-- }
              /^ *(([a-zA-Z0-9_"]*) *\| *)*'"$1"'( *\| *([a-zA-Z0-9_"]*))*\)/ && depth==1 { printing=1 }
              printing { print }
              /;; *$/ && depth==1 { printing=0 }' \
        "${BASH_SOURCE[0]}"
    fi
    ;;

  *)
    echo2 "Unknown subcommand: '$_au_subcommand'"
    ;;
esac

# For future reference: old jq magic to filter by tags:
#   jq '[
#     .Reservations[].Instances[] |
#     select(.State.Name == "running") |
#     select(.Tags[] | [{key:.Key,value:.Value}] | from_entries | .Name == "'"$1"'") |
#     .PublicIpAddress
#   ]'
