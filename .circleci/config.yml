# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
aliases:
  - &filter_sniffles_tag_staging
    tags:
      only: /v0\.1\.[0-9]+_[a-zA-Z0-9]+$/
    branches:
      ignore: /.*/
  - &filter_sniffles_tag_prod
    tags:
      only: /v0\.1\.[0-9]+_prod_[a-zA-Z0-9]+$/
    branches:
      ignore: /.*/

const: &const
  PROD_SERVER: "https://api.auderenow.io/api"
  STAGING_SERVER: "https://api.staging.auderenow.io/api"

defaults: &defaults
  docker:
    - image: circleci/node:10.13
      environment:
        TEST_DATABASE_URL: postgresql://audere@localhost/test
        TEST_PII_DATABASE_URL: postgresql://audere@localhost/test_pii
        TEST_NONPII_DATABASE_URL: postgresql://audere@localhost/test_nonpii
    - image: circleci/postgres:10.5-postgis-ram
      environment:
        POSTGRES_USER: audere
        POSTGRES_DB: test
  working_directory: ~/repo

setenv: &setenv
  name: setenv
  command: |
    echo "$PRODUCT"
    echo "$EXPO_RELEASE_CHANNEL"
    DEFAULT_ACCESS_KEY_A="TQpJzepFiEQoVTXAxFbORoMy3i23Xeeq_OYTM9esKzEFkpso0ZlQd5Hd_OWa9plB"
    if [[ "$EXPO_RELEASE_CHANNEL" == *prod ]]; then 
      export REACT_NATIVE_API_SERVER="$PROD_SERVER" 
      case "$PRODUCT" in
        sniffles)
          export ACCESS_KEY_A="$DEFAULT_ACCESS_KEY_A"
          export ACCESS_KEY_B="$DOCUMENT_UPLOAD_KEY_PROD"
          ;;
        fever)
          export ACCESS_KEY_A="7rebwsthpz5A9Xk8-h6lMd9a8hurQ2GuwQnkpYynzWfKJKogO8gHbQBS86Gjsk-F"
          export ACCESS_KEY_B="$DOCUMENT_UPLOAD_KEY_PROD_FEVER"
          ;;
        *) echo 1>&2 "Unrecognized product '$PRODUCT'"; false;;
      esac
    else 
      export REACT_NATIVE_API_SERVER="$STAGING_SERVER" 
      export ACCESS_KEY_A="$DEFAULT_ACCESS_KEY_A"
      export ACCESS_KEY_B="$DOCUMENT_UPLOAD_KEY_STAGING"
    fi
    case "$PRODUCT" in
      sniffles) cd learn/ReactNativeTS/FluTrack;;
      fever) cd FluStudy_au;;
      *) echo 1>&2 "Unrecognized product '$PRODUCT'"; false;;
    esac
    echo "REACT_NATIVE_API_SERVER=$REACT_NATIVE_API_SERVER" > .env
    echo "ACCESS_KEY_A=$ACCESS_KEY_A" >> .env
    echo "ACCESS_KEY_B=$ACCESS_KEY_B" >> .env
    if [[ "$PRODUCT" == "sniffles" ]]; then
      echo "FIREBASE_API_KEY=$SNIFFLES_FIREBASE_API_KEY" >> .env
    fi 

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - restore_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
      - restore_cache:
          key: fever-node-cache-{{ checksum "FluStudy_au/package.json" }}
      - restore_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
      - run:
          name: FluTrack Yarn Install
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: flu@home Yarn Install
          command: |
            cd FluStudy_au
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Generate Build Info
          command: |
            ./scripts/generate-build-info FluStudy_au
            ./scripts/build-hacks FluStudy_au
      - run:
          name: FluTrack Tests
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn typecheck
            yarn test
      - run:
          name: flu@home Tests
          command: |
            cd FluStudy_au
            yarn typecheck
            yarn test
      - run:
          name: Server Yarn Install
          command: |
            cd FluApi
            yarn install --frozen-lockfile
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Create Test Databases
          command: |
            sudo apt install postgresql-client
            # Wait up to a minute for port 5432 to open
            for i in $(seq 60); do (! nc -z localhost 5432) && sleep 1 || break; done
            psql "$TEST_DATABASE_URL" <<EOF
              CREATE DATABASE test_pii;
              CREATE DATABASE test_nonpii;
            EOF
      - run:
          name: Server Tests
          command: |
            sudo apt-get install -y rsync
            cd FluApi
            (
              echo PII_DATABASE_URL="$TEST_PII_DATABASE_URL"
              echo NONPII_DATABASE_URL="$TEST_NONPII_DATABASE_URL"
              echo POSTGIS_DATABASE_URL="$TEST_NONPII_DATABASE_URL"
              echo EXPORT_HASH_SECRET=secret
              echo HUTCH_BASE_URL=https://seattleflu.org/
              echo HUTCH_USER=user
              echo HUTCH_PASSWORD=password
              echo SMARTYSTREETS_BASE_URL=https://smartystreets.com/
              echo SMARTYSTREETS_AUTH_ID=12345
              echo SMARTYSTREETS_AUTH_TOKEN=67890
            ) > .env
            yarn setup
            yarn "migration:postgis"
            yarn typecheck
            yarn build
            yarn test
            yarn test-integration
      - run:
          name: FluLambda Yarn Install
          command: |
            cd FluLambda
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Lambda Build and Test
          command: |
            cd FluLambda
            yarn build
            yarn test
      - save_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
          paths:
            - learn/ReactNativeTS/FluTrack/node_modules
      - save_cache:
          key: fever-node-cache-{{ checksum "FluStudy_au/package.json" }}
          paths:
            - FluStudy_au/node_modules
      - save_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
          paths:
            - FluApi/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - learn/ReactNativeTS/FluTrack
            - lib

  snyk_scan:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - restore_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
      - restore_cache:
          key: fever-node-cache-{{ checksum "FluStudy_au/package.json" }}
      - restore_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
      - run:
          name: FluTrack Yarn Install
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Snyk FluTrack Scan
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn list --json > ~/current_packages
            git show $(git merge-base HEAD origin/master):./yarn.lock > yarn.lock
            git show $(git merge-base HEAD origin/master):./package.json > package.json
            yarn list --json > ~/master_packages
            if cmp --silent ~/{current,master}_packages; then
              echo "No new packages have been added to yarn.lock."
            else
              sudo npm install -g snyk
              snyk test --org=auderenow --severity-threshold=high
            fi
      - run:
          name: flu@home Yarn Install
          command: |
            cd FluStudy_au
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Run setup scripts
          command: |
            ./scripts/generate-build-info
            ./scripts/build-hacks
      - run:
          name: Snyk flu@home Scan
          command: |
            cd FluStudy_au
            yarn list --json > ~/current_packages
            git show $(git merge-base HEAD origin/master):./yarn.lock > yarn.lock
            git show $(git merge-base HEAD origin/master):./package.json > package.json
            yarn list --json > ~/master_packages
            if cmp --silent ~/{current,master}_packages; then
              echo "No new packages have been added to yarn.lock."
            else
              sudo npm install -g snyk
              snyk test --org=auderenow --severity-threshold=high
            fi
      - run:
          name: Server Yarn Install
          command: |
            cd FluApi
            yarn install --frozen-lockfile
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Snyk Server Scan
          command: |
            cd FluApi
            yarn list --json > ~/current_packages
            git show $(git merge-base HEAD origin/master):./yarn.lock > yarn.lock
            git show $(git merge-base HEAD origin/master):./package.json > package.json
            yarn list --json > ~/master_packages
            if cmp --silent ~/{current,master}_packages; then
              echo "No new packages have been added to yarn.lock."
            else
              sudo npm install -g snyk
              snyk test --org=auderenow --severity-threshold=high
            fi
      - save_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
          paths:
            - learn/ReactNativeTS/FluTrack/node_modules
      - save_cache:
          key: fever-node-cache-{{ checksum "FluStudy_au/package.json" }}
          paths:
            - FluStudy_au/node_modules
      - save_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
          paths:
            - FluApi/node_modules

  publish_sniffles: &publish_sniffles
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - run: *setenv
      - run:
          name: Publish to Expo
          command: |
            yarn global add expo-cli@2.16.1
            export PATH="$PATH:$(yarn global bin)"
            cd learn/ReactNativeTS/FluTrack
            expo logout
            expo login -u "$EXPO_USERNAME" -p "$EXPO_PASSWORD"
            expo publish --non-interactive --release-channel "$EXPO_RELEASE_CHANNEL"
            export EXPO_APPNAME=`cat app.json | python -c "import sys, json; print(json.load(sys.stdin)['expo']['name'])"`
            export EXPO_URL="https://exp.host/@$EXPO_USERNAME/$EXPO_APPNAME?release-channel=$EXPO_RELEASE_CHANNEL"
            curl -X POST --data-urlencode "payload={\"username\": \"circlebot\", \"text\": \"New $EXPO_RELEASE_CHANNEL build, triggered by tag $CIRCLE_TAG, has been published to <$EXPO_URL>. \nThis updates the $EXPO_RELEASE_CHANNEL channel to commit $CIRCLE_SHA1.\", \"icon_emoji\": \":hatching_chick:\"}" $SLACK_WEBHOOK

  publish_sniffles_to_expo_staging:
    environment:
      EXPO_RELEASE_CHANNEL: v0-staging
      PRODUCT: sniffles
      <<: *const
    <<: *publish_sniffles

  publish_sniffles_to_expo_prod:
    environment:
      EXPO_RELEASE_CHANNEL: v0-prod
      PRODUCT: sniffles
      <<: *const
    <<: *publish_sniffles

  build_ios:
    environment:
      PRODUCT: sniffles
      <<: *const
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Test env variables
          command: |
            if [[ -z "$EXPO_RELEASE_CHANNEL" ]]; then
              echo "Set EXPO_RELEASE_CHANNEL"; exit 1; 
            fi
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - restore_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
      - run:
          name: App Yarn Install
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn install
      - run:
          name: Generate Build Info
          command: |
            ./scripts/generate-build-info
      - run:
          name: App Tests
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn test
      - save_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
          paths:
            - learn/ReactNativeTS/FluTrack/node_modules
      - run: *setenv
      - run:
          name: Build iOS
          command: |
            yarn global add expo-cli
            export PATH="$PATH:$(yarn global bin)"
            cd learn/ReactNativeTS/FluTrack
            expo login -u "$EXPO_USERNAME" -p "$EXPO_PASSWORD"
            export IOS_BUILD_NUM=`cat app.json | python -c "import sys, json; print(json.load(sys.stdin)['expo']['ios']['buildNumber'])"`
            echo "About to build iOS binary $IOS_BUILD_NUM for $EXPO_RELEASE_CHANNEL"
            expo build:ios --non-interactive --release-channel "$EXPO_RELEASE_CHANNEL"
            export IPA_URL=`expo url:ipa`
            curl -X POST --data-urlencode "payload={\"username\": \"circlebot\", \"text\": \"Standalone iOS build $IOS_BUILD_NUM (channel $EXPO_RELEASE_CHANNEL, by user $CIRCLE_USERNAME) is ready to upload: $IPA_URL \nThis updates the $EXPO_RELEASE_CHANNEL channel to commit $CIRCLE_SHA1.\", \"icon_emoji\": \":gift:\"}" $SLACK_WEBHOOK

  build_deploy_fever: &build_deploy_fever
    environment:
      PRODUCT: fever
      # Fastlane env variable for where it should put output files
      FL_OUTPUT_DIR: output
      <<: *const
    macos:
      xcode: 10.1.0
    working_directory: ~/repo
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - restore_cache:
          key: feverprod-ios-node-cache-{{ checksum "FluStudy_au/package.json" }}
      - run:
          name: flu@home Yarn Install
          command: |
            cd FluStudy_au
            yarn install
      - save_cache:
          key: feverprod-ios-node-cache-{{ checksum "FluStudy_au/package.json" }}
          paths:
            - FluStudy_au/node_modules
      - run:
          name: Fetch CocoaPods Specs
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - restore_cache:
          key: feverprod-pod-cache-{{ checksum "FluStudy_au/ios/Podfile.lock" }}
      - run:
          name: flu@home pod install
          command: |
            cd FluStudy_au/ios
            pod install
      - save_cache:
          key: feverprod-pod-cache-{{ checksum "FluStudy_au/ios/Podfile.lock" }}
          paths:
            - FluStudy_au/ios/Pods
      - run:
          name: Run setup scripts
          command: |
            ./scripts/generate-build-info
            ./scripts/build-hacks
      - run:
          name: flu@home Tests
          command: |
            cd FluStudy_au
            yarn test
      - run:
          name: Configure Bundler
          command: |
            cd FluStudy_au/ios
            export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")
            sudo gem install bundler
      - restore_cache:
          key: 1-gems-{{ checksum "FluStudy_au/ios/Gemfile.lock" }}
      - run:
          name: Bundle install
          command: |
            cd FluStudy_au/ios
            bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "FluStudy_au/ios/Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run: *setenv
      - run:
          name: Setup Expo and expo publish
          command: |
            yarn global add expo-cli@2.16.1
            export PATH="$PATH:$(yarn global bin)" 
            cd FluStudy_au
            expo login -u "$EXPO_USERNAME" -p "$EXPO_PASSWORD"
            expo publish
      - run:
          name: Fastlane
          command: |
            cd FluStudy_au/ios
            bundle exec fastlane beta

  build_deploy_fever_android: &build_deploy_fever_android
    environment:
      PRODUCT: fever
      # Fastlane env variable for where it should put output files
      FL_OUTPUT_DIR: output
      # https://stackoverflow.com/questions/37171043/gradle-build-daemon-disappeared-unexpectedly-it-may-have-been-killed-or-may-hav
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
      JVM_OPTS: -Xmx3200m
      <<: *const
    docker:
      - image: circleci/android:api-27-node
    working_directory: /tmp/repo
    steps:
      - checkout
      - restore_cache:
          key: feverprod-android-node-cache-{{ checksum "FluStudy_au/package.json" }}
      - run:
          name: flu@home Yarn Install
          command: |
            cd FluStudy_au
            yarn install
      - save_cache:
          key: feverprod-android-node-cache-{{ checksum "FluStudy_au/package.json" }}
          paths:
            - FluStudy_au/node_modules
      - run:
          name: Run setup scripts
          command: |
            ./scripts/generate-build-info
            ./scripts/build-hacks
      - restore_cache:
          key: gradlejars-{{ checksum "FluStudy_au/android/build.gradle" }}-{{ checksum  "FluStudy_au/android/app/build.gradle" }}
      - run:
          name: Download Android dependencies
          command: |
            cd FluStudy_au/android
            ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: gradlejars-{{ checksum "FluStudy_au/android/build.gradle" }}-{{ checksum  "FluStudy_au/android/app/build.gradle" }}
      - restore_cache:
          key: 1-gems-android-{{ checksum "FluStudy_au/android/Gemfile.lock" }}
      - run:
          name: Bundle install
          command: |
            cd FluStudy_au/android
            bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-android-{{ checksum "FluStudy_au/android/Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run: *setenv
      - run:
          name: Setup Expo and expo publish
          command: |
            yarn global add expo-cli@2.16.1
            export PATH="$PATH:$(yarn global bin)"
            cd FluStudy_au
            expo login -u "$EXPO_USERNAME" -p "$EXPO_PASSWORD"
            expo publish
      - run:
          name: Prepare signing artifacts
          command: |
            cd FluStudy_au/android
            echo "$FEVER_SIGNING_STORE_ENCRYPTED" | base64 --decode | tee keystore.jks app/keystore.jks >/dev/null
            echo "export FEVER_SIGNING_STORE_FILE=keystore.jks" >> $BASH_ENV
            echo "$GOOGLE_PLAY_KEY_JSON" > google_play_key.json
      - run:
          name: Fastlane
          command: |
            cd FluStudy_au/android
            bundle exec fastlane internal

workflows:
  version: 2
  build_and_publish:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - publish_sniffles_to_expo_staging:
          requires:
            - build
          filters: *filter_sniffles_tag_staging
      - publish_sniffles_to_expo_prod:
          requires:
            - build
          filters: *filter_sniffles_tag_prod
  weekly:
    triggers:
      - schedule:
          cron: "10 12 * * 4" # Every Thurs 4:10am PST / 5:10am PDT
          filters:
            branches:
              only:
                - master
    jobs:
      - snyk_scan
