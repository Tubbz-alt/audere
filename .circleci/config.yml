# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
const: &const
  PROD_SERVER: "https://api.auderenow.io/api"
  STAGING_SERVER: "https://api.staging.auderenow.io/api"

defaults: &defaults
  docker:
    - image: circleci/node:10.13
      environment:
        TEST_DATABASE_URL: postgresql://audere@localhost/test
        TEST_PII_DATABASE_URL: postgresql://audere@localhost/test_pii
        TEST_NONPII_DATABASE_URL: postgresql://audere@localhost/test_nonpii
    - image: circleci/postgres:10.5-postgis-ram
      environment:
        POSTGRES_USER: audere
        POSTGRES_DB: test

setenv: &setenv
  name: setenv
  command: |
    echo "$PRODUCT"
    echo "$EXPO_RELEASE_CHANNEL"
    DEFAULT_ACCESS_KEY_A="TQpJzepFiEQoVTXAxFbORoMy3i23Xeeq_OYTM9esKzEFkpso0ZlQd5Hd_OWa9plB"
    if [[ "$EXPO_RELEASE_CHANNEL" == *prod ]]; then 
      export REACT_NATIVE_API_SERVER="$PROD_SERVER" 
      case "$PRODUCT" in
        "fever"|"cough"|"chills")
          export ACCESS_KEY_A="7rebwsthpz5A9Xk8-h6lMd9a8hurQ2GuwQnkpYynzWfKJKogO8gHbQBS86Gjsk-F"
          export ACCESS_KEY_B="$DOCUMENT_UPLOAD_KEY_PROD_FEVER"
          ;;
        *) echo 1>&2 "Unrecognized product '$PRODUCT'"; false;;
      esac
    else 
      export REACT_NATIVE_API_SERVER="$STAGING_SERVER" 
      export ACCESS_KEY_A="$DEFAULT_ACCESS_KEY_A"
      export ACCESS_KEY_B="$DOCUMENT_UPLOAD_KEY_STAGING"
    fi
    echo "REACT_NATIVE_API_SERVER=$REACT_NATIVE_API_SERVER" > .env
    echo "ACCESS_KEY_A=$ACCESS_KEY_A" >> .env
    echo "ACCESS_KEY_B=$ACCESS_KEY_B" >> .env

set_firebase_config: &set_firebase_config
  name: Set Firebase config files
  command: |
    GOOGLE_SERVICES_JSON_VAR=`echo "${PRODUCT}_${EXPO_RELEASE_CHANNEL}_GOOGLE_SERVICES_JSON" | tr [a-z] [A-Z]`
    GOOGLE_SERVICE_INFO_PLIST_VAR=`echo "${PRODUCT}_${EXPO_RELEASE_CHANNEL}_GOOGLE_SERVICE_INFO_PLIST" | tr [a-z] [A-Z]`
    echo "Decoding $GOOGLE_SERVICES_JSON_VAR"
    case "$PRODUCT" in 
      "cough"|"chills") 
        echo "${!GOOGLE_SERVICES_JSON_VAR}" | base64 --decode >> android/app/google-services.json
        echo "Decoding $GOOGLE_SERVICE_INFO_PLIST_VAR"
        echo "${!GOOGLE_SERVICE_INFO_PLIST_VAR}" | base64 --decode >> ios/fluathome/GoogleService-Info.plist
        grep -A 1 PROJECT ios/fluathome/GoogleService-Info.plist
        ;;
      "rash")
        echo "${!GOOGLE_SERVICES_JSON_VAR}" | base64 --decode >> android/app/google-services.json
        ;;
      *) echo 1>&2 "Unsupported product '$PRODUCT' for set_firebase_config"; false;;
    esac
    grep project_id android/app/google-services.json

version: 2
jobs:
  build:
    <<: *defaults
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - restore_cache:
          key: chills-node-cache-{{ checksum "FluStudy_us/package.json" }}
      - restore_cache:
          key: cough-node-cache-{{ checksum "FluStudy_au/package.json" }}
      - restore_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
      - restore_cache:
          key: chills-android-opencv-contrib-{{ checksum "scripts/build-hacks" }}
      - restore_cache:
          key: cough-android-opencv-contrib-{{ checksum "scripts/build-hacks" }}
      - run:
          name: Chills Yarn Install
          command: |
            cd FluStudy_us
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Chills Tests
          command: |
            ./scripts/generate-build-info FluStudy_us
            cd FluStudy_us
            ./scripts/build-hacks 
            yarn typecheck
            yarn test
      - save_cache:
          key: chills-android-opencv-contrib-{{ checksum "scripts/build-hacks" }}
          paths:
            - FluStudy_us/android/openCVLibrary341-contrib
            - FluStudy_us/android/app/src/main/jniLibs
      - run:
          name: Cough Yarn Install
          command: |
            cd FluStudy_au
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Cough Tests
          command: |
            ./scripts/generate-build-info FluStudy_au
            cd FluStudy_au
            ./scripts/build-hacks 
            yarn typecheck
            yarn test
      - save_cache:
          key: cough-android-opencv-contrib-{{ checksum "scripts/build-hacks" }}
          paths:
            - FluStudy_au/android/openCVLibrary341-contrib
            - FluStudy_au/android/app/src/main/jniLibs
      - run:
          name: Server Yarn Install
          command: |
            cd FluApi
            yarn install --frozen-lockfile
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Create Test Databases
          command: |
            sudo apt-get update
            sudo apt-get install -y postgresql-client
            # Wait up to a minute for port 5432 to open
            for i in $(seq 60); do (! nc -z localhost 5432) && sleep 1 || break; done
            psql "$TEST_DATABASE_URL" <<EOF
              CREATE DATABASE test_pii;
              CREATE DATABASE test_nonpii;
            EOF
      - run:
          name: Server Tests
          command: |
            sudo apt-get install -y rsync
            cd FluApi
            (
              echo PII_DATABASE_URL="$TEST_PII_DATABASE_URL"
              echo NONPII_DATABASE_URL="$TEST_NONPII_DATABASE_URL"
              echo POSTGIS_DATABASE_URL="$TEST_NONPII_DATABASE_URL"
              echo EXPORT_HASH_SECRET=secret
              echo HUTCH_BASE_URL=https://seattleflu.org/
              echo HUTCH_USER=user
              echo HUTCH_PASSWORD=password
              echo SMARTYSTREETS_BASE_URL=https://smartystreets.com/
              echo SMARTYSTREETS_AUTH_ID=12345
              echo SMARTYSTREETS_AUTH_TOKEN=67890
              echo S3_REPORT_BUCKET=test.bucket
              echo S3_ASPREN_BUCKET=test.bucket
              echo S3_FILESHARE_BUCKET=test.fileshare.bucket
            ) > .env
            yarn setup
            yarn "migration:postgis"
            yarn typecheck
            yarn build
            yarn test
            yarn test-integration
      - run:
          name: FluLambda Yarn Install
          command: |
            cd FluLambda
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Lambda Build and Test
          command: |
            cd FluLambda
            yarn build
            yarn test
      - save_cache:
          key: cough-node-cache-{{ checksum "FluStudy_au/package.json" }}
          paths:
            - FluStudy_au/node_modules
      - save_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
          paths:
            - FluApi/node_modules

  snyk_scan:
    <<: *defaults
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - restore_cache:
          key: chills-node-cache-{{ checksum "FluStudy_us/package.json" }}
      - restore_cache:
          key: cough-node-cache-{{ checksum "FluStudy_au/package.json" }}
      - restore_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
      - run:
          name: Chills Yarn Install
          command: |
            cd FluStudy_us
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Snyk Chills Scan
          command: |
            cd FluStudy_us
            yarn list --json > ~/current_packages
            git show $(git merge-base HEAD origin/master):./yarn.lock > yarn.lock
            git show $(git merge-base HEAD origin/master):./package.json > package.json
            yarn list --json > ~/master_packages
            if cmp --silent ~/{current,master}_packages; then
              echo "No new packages have been added to yarn.lock."
            else
              sudo npm install -g snyk
              snyk test --org=auderenow --severity-threshold=high
            fi
      - run:
          name: Cough Yarn Install
          command: |
            cd FluStudy_au
            yarn install
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Snyk Cough Scan
          command: |
            cd FluStudy_au
            yarn list --json > ~/current_packages
            git show $(git merge-base HEAD origin/master):./yarn.lock > yarn.lock
            git show $(git merge-base HEAD origin/master):./package.json > package.json
            yarn list --json > ~/master_packages
            if cmp --silent ~/{current,master}_packages; then
              echo "No new packages have been added to yarn.lock."
            else
              sudo npm install -g snyk
              snyk test --org=auderenow --severity-threshold=high
            fi
      - run:
          name: Server Yarn Install
          command: |
            cd FluApi
            yarn install --frozen-lockfile
            ls node_modules
            if [[ -e package-lock.json ]]; then
              echo "Unexpected 'package-lock.json'.  Use 'yarn install' instead of 'npm install'."
              echo "To fix, 'git rm package-lock.jon', 'yarn install', and 'git add yarn-lock.json'."
              false
            fi
      - run:
          name: Snyk Server Scan
          command: |
            cd FluApi
            yarn list --json > ~/current_packages
            git show $(git merge-base HEAD origin/master):./yarn.lock > yarn.lock
            git show $(git merge-base HEAD origin/master):./package.json > package.json
            yarn list --json > ~/master_packages
            if cmp --silent ~/{current,master}_packages; then
              echo "No new packages have been added to yarn.lock."
            else
              sudo npm install -g snyk
              snyk test --org=auderenow --severity-threshold=high
            fi
      - save_cache:
          key: chills-node-cache-{{ checksum "FluStudy_us/package.json" }}
          paths:
            - FluStudy_us/node_modules
      - save_cache:
          key: cough-node-cache-{{ checksum "FluStudy_au/package.json" }}
          paths:
            - FluStudy_au/node_modules
      - save_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
          paths:
            - FluApi/node_modules

  build_deploy_fluathome: &build_deploy_fluathome
    environment:
      # PRODUCT will be passed in from env
      FL_OUTPUT_DIR: output # Fastlane env variable for where it should put output files
      <<: *const
    macos:
      xcode: 11.1.0
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout:
          path: ~/repo
      - add_ssh_keys:
          fingerprints:
            - "14:8c:a6:8e:67:c2:59:8f:59:8b:92:f2:e6:e5:57:b6"
      - run:
          name: SSH config
          command: |
            echo $SSH_CONFIG_SUFFIX | base64 --decode >> ~/.ssh/config
            cat ~/.ssh/config
            ssh -T -oStrictHostKeyChecking=accept-new au-aws-git true || true
      - restore_cache:
          key: athome-prod-ios-node-cache-{{ checksum "package.json" }}
      - run:
          name: flu@home Yarn Install
          command: |
            yarn install
      - save_cache:
          key: athome-prod-ios-node-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Fetch CocoaPods Specs
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      #      - restore_cache:
      #          key: fluathome-gems-{{ checksum "ios/Gemfile.lock" }}
      - run:
          name: Bundle install
          command: |
            ls -l vendor/bundle
            ruby --version
            cd ios
            bundle install --path ../vendor/bundle
      - save_cache:
          key: fluathome-gems-{{ checksum "ios/Gemfile.lock" }}
          paths:
            - vendor/bundle
      - restore_cache:
          key: athome-prod-pod-cache-{{ checksum "ios/Podfile.lock" }}
      - run:
          name: flu@home pod install
          command: |
            cd ios
            bundle exec pod --version
            bundle exec pod install
      - save_cache:
          key: athome-prod-pod-cache-{{ checksum "ios/Podfile.lock" }}
          paths:
            - ios/Pods
      - run:
          name: Run setup scripts
          command: |
            ../scripts/generate-build-info `basename "$PWD"`
            ./scripts/build-hacks
      - run: *set_firebase_config
      - run:
          name: flu@home Tests
          command: |
            yarn test
      - run: *setenv
      - run:
          name: Setup Expo and expo publish
          command: |
            yarn global add expo-cli
            export PATH="$PATH:$(yarn global bin)"
            expo login -u "$EXPO_USERNAME" -p "$EXPO_PASSWORD"
            expo publish --non-interactive
      - run:
          name: Fastlane
          command: |
            cd ios
            bundle exec fastlane beta

  build_deploy_fluathome_android: &build_deploy_fluathome_android
    environment:
      # PRODUCT will be passed in from env
      FL_OUTPUT_DIR: output # Fastlane env variable for where it should put output files
      # https://stackoverflow.com/questions/37171043/gradle-build-daemon-disappeared-unexpectedly-it-may-have-been-killed-or-may-hav
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
      JVM_OPTS: -Xmx3200m
      <<: *const
    docker:
      - image: circleci/android:api-28-node
    steps:
      - checkout:
          path: /tmp/repo
      - restore_cache:
          key: athomeprod-android-node-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: cough-android-opencv-contrib-{{ checksum "scripts/build-hacks" }}
      - run:
          name: flu@home Yarn Install
          command: |
            yarn install
      - save_cache:
          key: athomeprod-android-node-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Run setup scripts
          command: |
            ../scripts/generate-build-info `basename "$PWD"`
            ./scripts/build-hacks
      - run: *set_firebase_config
      - restore_cache:
          key: gradlejars-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
      - run:
          name: Download Android dependencies
          command: |
            cd android
            ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: gradlejars-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
      - restore_cache:
          key: 1-gems-android-{{ checksum "android/Gemfile.lock" }}
      - run:
          name: Bundle install
          command: |
            cd android
            bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-android-{{ checksum "android/Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run: *setenv
      - run:
          name: Setup Expo and expo publish
          command: |
            yarn global add expo-cli
            export PATH="$PATH:$(yarn global bin)"
            expo login -u "$EXPO_USERNAME" -p "$EXPO_PASSWORD"
            # FEV-658 Publish each Android build to unique release channel
            expo publish --max-workers 2 --non-interactive --release-channel "${PRODUCT}_${CIRCLE_BUILD_NUM}"
      - run:
          name: Prepare signing artifacts
          command: |
            cd android
            echo "$FEVER_SIGNING_STORE_ENCRYPTED" | base64 --decode | tee keystore.jks app/keystore.jks >/dev/null
            echo "export FEVER_SIGNING_STORE_FILE=keystore.jks" >> $BASH_ENV
            echo "$GOOGLE_PLAY_KEY_JSON" > google_play_key.json
      - run:
          name: Fastlane
          command: |
            cd android
            bundle exec fastlane internal
      - store_artifacts:
          path: android/app/build/outputs/bundle/release

  build_deploy_fever:
    working_directory: ~/repo/FluStudy_us
    <<: *build_deploy_fluathome

  build_deploy_fever_android:
    working_directory: /tmp/repo/FluStudy_us
    <<: *build_deploy_fluathome_android

  build_deploy_cough:
    working_directory: ~/repo/FluStudy_au
    <<: *build_deploy_fluathome

  build_deploy_cough_android:
    working_directory: /tmp/repo/FluStudy_au
    <<: *build_deploy_fluathome_android

  build_deploy_chills:
    working_directory: ~/repo/FluStudy_us
    <<: *build_deploy_fluathome

  build_deploy_chills_android:
    working_directory: /tmp/repo/FluStudy_us
    <<: *build_deploy_fluathome_android

  build_deploy_rash: &build_deploy_rash
    environment:
      <<: *const
    working_directory: /tmp/repo/EbPhotoStore
    docker:
      - image: circleci/android:api-28-node
    steps:
      - checkout:
          path: /tmp/repo
      - restore_cache:
          key: rash-node-cache-{{ checksum "package.json" }}
      - run:
          name: Rash Yarn Install
          command: |
            yarn install
      - save_cache:
          key: rash-node-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run: *set_firebase_config
      - run:
          name: Run setup scripts
          command: |
            ../scripts/generate-build-info `basename "$PWD"`
            ./scripts/build-hacks
      - restore_cache:
          key: gradlejars-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
      - run:
          name: Download Android dependencies
          command: |
            cd android
            ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: gradlejars-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}
      - restore_cache:
          key: 1-gems-android-{{ checksum "android/Gemfile.lock" }}
      - run:
          name: Bundle install
          command: |
            cd android
            bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-android-{{ checksum "android/Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Prepare signing artifacts
          command: |
            cd android
            echo "$FEVER_SIGNING_STORE_ENCRYPTED" | base64 --decode | tee keystore.jks app/keystore.jks >/dev/null
            echo "export FEVER_SIGNING_STORE_FILE=keystore.jks" >> $BASH_ENV
            echo "$GOOGLE_PLAY_KEY_JSON" > google_play_key.json
      - run:
          name: Fastlane
          command: |
            cd android
            bundle exec fastlane internal
      - store_artifacts:
          path: /tmp/repo/EbPhotoStore/android/app/build/outputs/bundle/release

workflows:
  version: 2
  build_and_publish:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
  weekly:
    triggers:
      - schedule:
          cron: "10 12 * * 4" # Every Thurs 4:10am PST / 5:10am PDT
          filters:
            branches:
              only:
                - master
    jobs:
      - snyk_scan
