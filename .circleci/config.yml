# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
aliases:
  - &filter_tag_staging
    tags:
      only: /v0\.[0-9]+\.[0-9]+_[a-zA-Z0-9]+$/
    branches:
      ignore: /.*/
  - &filter_tag_prod
    tags:
      only: /v0\.[0-9]+\.[0-9]+_prod_[a-zA-Z0-9]+$/
    branches:
      ignore: /.*/

const: &const
  PROD_SERVER: "https://api.auderenow.io/api"
  STAGING_SERVER: "https://api.staging.auderenow.io/api"

defaults: &defaults
  docker:
    - image: circleci/node:10.13
      environment:
        TEST_DATABASE_URL: postgresql://audere@localhost/test
        TEST_PII_DATABASE_URL: postgresql://audere@localhost/test_pii
        TEST_NONPII_DATABASE_URL: postgresql://audere@localhost/test_nonpii
    - image: circleci/postgres:10.5-ram
      environment:
        POSTGRES_USER: audere
        POSTGRES_DB: test
  working_directory: ~/repo

setenv: &setenv
  command: |
    if [[ "$EXPO_RELEASE_CHANNEL" == *prod ]]; then 
      export REACT_NATIVE_API_SERVER="$PROD_SERVER" 
      export ACCESS_KEY_B="$DOCUMENT_UPLOAD_KEY_PROD"
    else 
      export REACT_NATIVE_API_SERVER="$STAGING_SERVER" 
      export ACCESS_KEY_B="$DOCUMENT_UPLOAD_KEY_STAGING"
    fi
    cd learn/ReactNativeTS/FluTrack
    echo "REACT_NATIVE_API_SERVER=$REACT_NATIVE_API_SERVER" > .env
    echo "ACCESS_KEY_A=TQpJzepFiEQoVTXAxFbORoMy3i23Xeeq_OYTM9esKzEFkpso0ZlQd5Hd_OWa9plB" >> .env
    echo "ACCESS_KEY_B=$ACCESS_KEY_B" >> .env
    more .env

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - restore_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
      - restore_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
      - run:
          name: FluTrack Yarn Install
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn install
            ls node_modules
      - run:
          name: Flu@Home Yarn Install
          command: |
            cd FluStudy
            yarn install
      - run:
          name: Generate Build Info
          command: |
            scripts/generate-build-info
      - run:
          name: FluTrack Tests
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn test
      - run:
          name: Flu@Home Tests
          command: |
            cd FluStudy
            yarn test
      - run:
          name: Snyk App Scan
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn list --json > ~/current_packages
            git show $(git rev-parse origin/master):./yarn.lock > yarn.lock
            git show $(git rev-parse origin/master):./package.json > package.json
            yarn list --json > ~/master_packages
            if cmp --silent ~/{current,master}_packages; then
              echo "No new packages have been added to yarn.lock."
            else
              sudo npm install -g snyk
              snyk test --org=auderenow --severity-threshold=high
            fi
      - run:
          name: Server Yarn Install
          command: |
            cd FluApi
            yarn install
      - run:
          name: Create Test Databases
          command: |
            sudo apt install postgresql-client
            # Wait up to a minute for port 5432 to open
            for i in $(seq 60); do (! nc -z localhost 5432) && sleep 1 || break; done
            psql "$TEST_DATABASE_URL" <<EOF
              CREATE DATABASE test_pii;
              CREATE DATABASE test_nonpii;
            EOF
      - run:
          name: Server Tests
          command: |
            cd FluApi
            (
              echo PII_DATABASE_URL="$TEST_PII_DATABASE_URL"
              echo NONPII_DATABASE_URL="$TEST_NONPII_DATABASE_URL"
            ) > .env
            yarn setup
            yarn test
      - run:
          name: Snyk Server Scan
          command: |
            cd FluApi
            yarn list --json > ~/current_packages
            git show $(git rev-parse origin/master):./yarn.lock > yarn.lock
            git show $(git rev-parse origin/master):./package.json > package.json
            yarn list --json > ~/master_packages
            if cmp --silent ~/{current,master}_packages; then
              echo "No new packages have been added to yarn.lock."
            else
              sudo npm install -g snyk
              snyk test --org=auderenow --severity-threshold=high
            fi
      - save_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
          paths:
            - learn/ReactNativeTS/FluTrack/node_modules
      - save_cache:
          key: server-node-cache-{{ checksum "FluApi/package.json" }}
          paths:
            - FluApi/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - learn/ReactNativeTS/FluTrack
            - lib

  publish: &publish
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - run: *setenv
      - run:
          name: Publish to Expo
          command: |
            yarn global add expo-cli
            export PATH="$PATH:$(yarn global bin)"
            cd learn/ReactNativeTS/FluTrack
            expo logout
            expo login -u "$EXPO_USERNAME" -p "$EXPO_PASSWORD"
            expo publish --non-interactive --release-channel "$EXPO_RELEASE_CHANNEL"
            export EXPO_APPNAME=`cat app.json | python -c "import sys, json; print(json.load(sys.stdin)['expo']['name'])"`
            export EXPO_URL="https://exp.host/@$EXPO_USERNAME/$EXPO_APPNAME?release-channel=$EXPO_RELEASE_CHANNEL"
            curl -X POST --data-urlencode "payload={\"username\": \"circlebot\", \"text\": \"New $EXPO_RELEASE_CHANNEL build, triggered by tag $CIRCLE_TAG, has been published to <$EXPO_URL>. \nThis updates the $EXPO_RELEASE_CHANNEL channel to commit $CIRCLE_SHA1.\", \"icon_emoji\": \":hatching_chick:\"}" $SLACK_WEBHOOK

  publish_to_expo_staging:
    environment:
      EXPO_DEBUG: true
      EXPO_RELEASE_CHANNEL: v0-staging
      <<: *const
    <<: *publish

  publish_to_expo_prod:
    environment:
      EXPO_RELEASE_CHANNEL: v0-prod
      <<: *const
    <<: *publish

  build_ios:
    environment:
      <<: *const
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Test env variables
          command: |
            if [ -z "$EXPO_RELEASE_CHANNEL" ]; then 
              echo "Set EXPO_RELEASE_CHANNEL"; exit 1; 
            fi
      - run:
          name: Update yarn
          command: "sudo npm install -g yarn@latest"
      - restore_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
      - run:
          name: App Yarn Install
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn install
      - run:
          name: Generate Build Info
          command: |
            scripts/generate-build-info
      - run:
          name: App Tests
          command: |
            cd learn/ReactNativeTS/FluTrack
            yarn test
      - save_cache:
          key: app-node-cache-{{ checksum "learn/ReactNativeTS/FluTrack/package.json" }}
          paths:
            - learn/ReactNativeTS/FluTrack/node_modules
      - run: *setenv
      - run:
          name: Build iOS
          command: |
            yarn global add expo-cli
            export PATH="$PATH:$(yarn global bin)"
            cd learn/ReactNativeTS/FluTrack
            expo login -u "$EXPO_USERNAME" -p "$EXPO_PASSWORD"
            export IOS_BUILD_NUM=`cat app.json | python -c "import sys, json; print(json.load(sys.stdin)['expo']['ios']['buildNumber'])"`
            echo "About to build iOS binary $IOS_BUILD_NUM for $EXPO_RELEASE_CHANNEL"
            expo build:ios --non-interactive --release-channel "$EXPO_RELEASE_CHANNEL"
            export IPA_URL=`expo url:ipa`
            curl -X POST --data-urlencode "payload={\"username\": \"circlebot\", \"text\": \"Standalone iOS build $IOS_BUILD_NUM (channel $EXPO_RELEASE_CHANNEL, by user $CIRCLE_USERNAME) is ready to upload: $IPA_URL \nThis updates the $EXPO_RELEASE_CHANNEL channel to commit $CIRCLE_SHA1.\", \"icon_emoji\": \":gift:\"}" $SLACK_WEBHOOK

workflows:
  version: 2
  build_and_publish:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - publish_to_expo_staging:
          requires:
            - build
          filters: *filter_tag_staging
      - publish_to_expo_prod:
          requires:
            - build
          filters: *filter_tag_prod
